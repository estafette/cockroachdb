apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "cockroachdb.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
{{ include "cockroachdb.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  serviceName: {{ include "cockroachdb.fullname" . }}
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "cockroachdb.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "cockroachdb.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        {{- if .Chart.AppVersion }}
        app.kubernetes.io/version: {{ .Chart.AppVersion | quote }}
        {{- end }}
        {{- range $key, $value := .Values.extraPodLabels }}
        {{ $key }}: {{ $value }}
        {{- end }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/_status/vars"
        prometheus.io/port: "8080"
        prometheus.io/scheme: "http"
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ template "cockroachdb.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ template "cockroachdb.imageTag" . }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - "/bin/bash"
            - "-ecx"
              # The use of qualified `hostname -f` is crucial:
              # Other nodes aren't able to look up the unqualified hostname.
            - "exec /cockroach/cockroach start --logtostderr {{ if .Values.secure.enabled }}--certs-dir /cockroach/cockroach-certs{{ else }}--insecure{{ end }} --advertise-host $(hostname).${STATEFULSET_FQDN} --http-host 0.0.0.0 --http-port {{ .Values.internalHttpPort }} --port {{ .Values.internalGrpcPort }} --cache {{ .Values.cacheSize }} --max-sql-memory {{ .Values.maxSQLMemory }} {{ if .Values.locality }}--locality={{.Values.locality }}{{ end }} --join {{ if .Values.joinExisting }}{{ join "," .Values.joinExisting }}{{ else }}${STATEFULSET_NAME}-0.${STATEFULSET_FQDN}:{{ .Values.internalGrpcPort }},${STATEFULSET_NAME}-1.${STATEFULSET_FQDN}:{{ .Values.internalGrpcPort }},${STATEFULSET_NAME}-2.${STATEFULSET_FQDN}:{{ .Values.internalGrpcPort }}{{ end }}{{ range .Values.extraArgs }} {{ . }}{{ end }}" 
          env:
            - name: "COCKROACH_SKIP_ENABLING_DIAGNOSTIC_REPORTING"
              value: "true"
            - name: STATEFULSET_NAME
              value: "{{ include "cockroachdb.fullname" . }}"
            - name: STATEFULSET_FQDN
              value: "{{ include "cockroachdb.fullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}"
            - name: COCKROACH_CHANNEL
              value: kubernetes-helm
            {{- range $key, $value := .Values.extraEnv }}
            - name: {{ $key }}
              value: {{ $value }}
            {{- end }}
          ports:
            - containerPort: {{ .Values.internalGrpcPort }}
              name: grpc
            - containerPort: {{ .Values.internalHttpPort }}
              name: http
          livenessProbe:
            httpGet:
              path: "/health"
              port: http
              {{- if .Values.secure.enabled }}
              scheme: HTTPS
              {{- end }}
            initialDelaySeconds: 30
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: "/health?ready=1"
              port: http
              {{- if .Values.secure.enabled }}
              scheme: HTTPS
              {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: datadir
              mountPath: /cockroach/cockroach-data
              {{- if .Values.secure.enabled }}
            - name: certs
              mountPath: /cockroach/cockroach-certs
              {{- end }}
      terminationGracePeriodSeconds: 60
      volumes:
      - name: datadir
        persistentVolumeClaim:
          claimName: {{ include "cockroachdb.fullname" . }}-datadir
      {{- if .Values.secure.enabled }}
      - name: certs
        emptyDir: {}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: {{ include "cockroachdb.fullname" . }}-datadir
      namespace: {{ .Release.Namespace }}
      labels:
{{ include "cockroachdb.labels" . | indent 8 }}
    spec:
      accessModes:
        - "ReadWriteOnce"
{{- if .Values.storageClass }}
{{- if (eq "-" .Values.storageClass) }}
      storageClassName: ""
{{- else }}
      storageClassName: "{{ .Values.storageClass }}"
{{- end }}
{{- end }}
      resources:
        requests:
          storage: "{{ .Values.storage }}"